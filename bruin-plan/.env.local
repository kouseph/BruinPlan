MONGODB_URI=mongodb://localhost:27017/BruinPlanDB
# Or your MongoDB Atlas connection string:
# MONGODB_URI=mongodb+srv://<username>:<password>@<cluster-url>/BruinPlanDB?retryWrites=true&w=majority

GOOGLE_CLIENT_ID="YOUR_GOOGLE_CLIENT_ID"
GOOGLE_CLIENT_SECRET="YOUR_GOOGLE_CLIENT_SECRET"

# Generate a strong secret: openssl rand -base64 32
NEXTAUTH_SECRET="YOUR_NEXTAUTH_SECRET"

# The canonical URL of your production site
# For development, if your app runs on http://localhost:3000
NEXTAUTH_URL="http://localhost:3000"
```*   **Obtain `GOOGLE_CLIENT_ID` and `GOOGLE_CLIENT_SECRET`** from the Google Cloud Console by setting up an OAuth 2.0 client ID. Ensure you add `http://localhost:3000/api/auth/callback/google` (or your production URL equivalent) to the "Authorized redirect URIs".
*   **`NEXTAUTH_SECRET`** is crucial for security (signing JWTs, etc.). Generate a strong random string.
*   **`NEXTAUTH_URL`** should be the base URL of your application.

---

**2. MongoDB Connection Utility (`lib/mongodb.js`)**

This file remains the same.

```javascript
// lib/mongodb.js
import mongoose from 'mongoose';

const MONGODB_URI = process.env.MONGODB_URI;

if (!MONGODB_URI) {
  throw new Error(
    'Please define the MONGODB_URI environment variable inside .env.local'
  );
}

let cached = global.mongoose;

if (!cached) {
  cached = global.mongoose = { conn: null, promise: null };
}

async function dbConnect() {
  if (cached.conn) {
    return cached.conn;
  }

  if (!cached.promise) {
    const opts = {
      bufferCommands: false,
    };

    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongooseInstance) => {
      return mongooseInstance;
    });
  }
  cached.conn = await cached.promise;
  return cached.conn;
}

export default dbConnect;